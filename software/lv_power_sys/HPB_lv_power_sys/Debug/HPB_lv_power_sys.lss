
HPB_lv_power_sys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000621  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000049  00008544  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000006d  00803800  00803800  00000621  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000621  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00000698  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000395e  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000205c  00000000  00000000  00004106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b3a  00000000  00000000  00006162  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c8  00000000  00000000  00006c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001aa8  00000000  00000000  00006e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000465  00000000  00000000  0000890c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00008d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_3>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_18>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_23>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ad 36       	cpi	r26, 0x6D	; 109
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  98:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC_init>:
	temp += adc_offset_mv[res];

	return (int16_t) temp;


}
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <adc_active_ch>
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	20 c0       	rjmp	.+64     	; 0xf4 <ADC_init+0x54>
  b4:	e1 2e       	mov	r14, r17
  b6:	f1 2c       	mov	r15, r1
  b8:	e7 01       	movw	r28, r14
  ba:	cc 0f       	add	r28, r28
  bc:	dd 1f       	adc	r29, r29
  be:	fe 01       	movw	r30, r28
  c0:	ea 5f       	subi	r30, 0xFA	; 250
  c2:	f7 4c       	sbci	r31, 0xC7	; 199
  c4:	8e ef       	ldi	r24, 0xFE	; 254
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	80 83       	st	Z, r24
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	c7 01       	movw	r24, r14
  ce:	80 5c       	subi	r24, 0xC0	; 192
  d0:	9f 4f       	sbci	r25, 0xFF	; 255
  d2:	0e 94 93 02 	call	0x526	; 0x526 <eeprom_read_word>
  d6:	fe 01       	movw	r30, r28
  d8:	e6 5e       	subi	r30, 0xE6	; 230
  da:	f7 4c       	sbci	r31, 0xC7	; 199
  dc:	80 83       	st	Z, r24
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	c7 01       	movw	r24, r14
  e2:	80 5b       	subi	r24, 0xB0	; 176
  e4:	9f 4f       	sbci	r25, 0xFF	; 255
  e6:	0e 94 93 02 	call	0x526	; 0x526 <eeprom_read_word>
  ea:	c0 5f       	subi	r28, 0xF0	; 240
  ec:	d7 4c       	sbci	r29, 0xC7	; 199
  ee:	88 83       	st	Y, r24
  f0:	99 83       	std	Y+1, r25	; 0x01
  f2:	1f 5f       	subi	r17, 0xFF	; 255
  f4:	15 30       	cpi	r17, 0x05	; 5
  f6:	f0 f2       	brcs	.-68     	; 0xb4 <ADC_init+0x14>
  f8:	e0 ea       	ldi	r30, 0xA0	; 160
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f6 e0       	ldi	r31, 0x06	; 6
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	81 83       	std	Z+1, r24	; 0x01
 10a:	8e e2       	ldi	r24, 0x2E	; 46
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	80 87       	std	Z+8, r24	; 0x08
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	08 95       	ret

00000122 <ADC_isDone>:
 122:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <adc_active_ch>
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	19 f4       	brne	.+6      	; 0x130 <ADC_isDone+0xe>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret

00000136 <ADC_startSweep>:
 136:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <adc_active_ch>
 13a:	8f 3f       	cpi	r24, 0xFF	; 255
 13c:	69 f4       	brne	.+26     	; 0x158 <ADC_startSweep+0x22>
 13e:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <adc_active_ch>
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f6 e0       	ldi	r31, 0x06	; 6
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	84 87       	std	Z+12, r24	; 0x0c
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	84 83       	std	Z+4, r24	; 0x04
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	82 87       	std	Z+10, r24	; 0x0a
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	9f ef       	ldi	r25, 0xFF	; 255
 15c:	08 95       	ret

0000015e <__vector_23>:

ISR(ADC0_SAMPRDY_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// store measurement
	adc_results[adc_active_ch] = ADC0.SAMPLE;
 174:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <adc_active_ch>
 178:	ae 2f       	mov	r26, r30
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <adc_channels+0x7f808c>
 180:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <adc_channels+0x7f808d>
 184:	aa 0f       	add	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	aa 5f       	subi	r26, 0xFA	; 250
 18a:	b7 4c       	sbci	r27, 0xC7	; 199
 18c:	8d 93       	st	X+, r24
 18e:	9c 93       	st	X, r25

	// next channel
	adc_active_ch++;
 190:	ef 5f       	subi	r30, 0xFF	; 255
 192:	e0 93 05 38 	sts	0x3805, r30	; 0x803805 <adc_active_ch>

	// start conversion if not done with sweep
	if (adc_active_ch < ADC_NUM_CH)
 196:	e5 30       	cpi	r30, 0x05	; 5
 198:	50 f4       	brcc	.+20     	; 0x1ae <__vector_23+0x50>
	{
		ADC0.MUXPOS = adc_channels[adc_active_ch];
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	e8 57       	subi	r30, 0x78	; 120
 19e:	fa 47       	sbci	r31, 0x7A	; 122
 1a0:	80 81       	ld	r24, Z
 1a2:	e0 e0       	ldi	r30, 0x00	; 0
 1a4:	f6 e0       	ldi	r31, 0x06	; 6
 1a6:	84 87       	std	Z+12, r24	; 0x0c
		ADC0.COMMAND = ADC_START_IMMEDIATE_gc;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	82 87       	std	Z+10, r24	; 0x0a
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_23+0x5a>
	}
	// otherwise disable interrupt and flag "ready to re-run"
	else
	{
		ADC0.INTCTRL = 0;
 1ae:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <adc_channels+0x7f807c>
		adc_active_ch = 0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <adc_active_ch>
	}


 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <CLOCK_init>:


uint32_t CLOCK_getTime()
{
	return sys_time;
}
 1ce:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <sys_time>
 1d2:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <sys_time+0x1>
 1d6:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <sys_time+0x2>
 1da:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <sys_time+0x3>
 1de:	88 ed       	ldi	r24, 0xD8	; 216
 1e0:	84 bf       	out	0x34, r24	; 52
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	91 83       	std	Z+1, r25	; 0x01
 1ea:	84 bf       	out	0x34, r24	; 52
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 8f       	std	Z+24, r24	; 0x18
 1f0:	e0 e4       	ldi	r30, 0x40	; 64
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	8d ec       	ldi	r24, 0xCD	; 205
 1f6:	9c e0       	ldi	r25, 0x0C	; 12
 1f8:	82 87       	std	Z+10, r24	; 0x0a
 1fa:	93 87       	std	Z+11, r25	; 0x0b
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	82 83       	std	Z+2, r24	; 0x02
 200:	17 82       	std	Z+7, r1	; 0x07
 202:	81 e8       	ldi	r24, 0x81	; 129
 204:	80 83       	st	Z, r24
 206:	89 e3       	ldi	r24, 0x39	; 57
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <delay_ticks_per_msec>
 20e:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <delay_ticks_per_msec+0x1>
 212:	81 ed       	ldi	r24, 0xD1	; 209
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <max_delay>
 21a:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <max_delay+0x1>
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <adc_channels+0x7f8478>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <CLOCK_delayMSec>:


uint16_t CLOCK_delayMSec(uint16_t delay)
{
 22a:	ac 01       	movw	r20, r24
	uint16_t time = 0;

	if (delay > max_delay) time = max_delay;
 22c:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <max_delay>
 230:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <max_delay+0x1>
 234:	84 17       	cp	r24, r20
 236:	95 07       	cpc	r25, r21
 238:	08 f0       	brcs	.+2      	; 0x23c <CLOCK_delayMSec+0x12>
	else time = delay;
 23a:	ca 01       	movw	r24, r20

	time *= delay_ticks_per_msec;
 23c:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <delay_ticks_per_msec>
 240:	70 91 2c 38 	lds	r23, 0x382C	; 0x80382c <delay_ticks_per_msec+0x1>
 244:	86 9f       	mul	r24, r22
 246:	90 01       	movw	r18, r0
 248:	87 9f       	mul	r24, r23
 24a:	30 0d       	add	r19, r0
 24c:	96 9f       	mul	r25, r22
 24e:	30 0d       	add	r19, r0
 250:	11 24       	eor	r1, r1

	TCA0_SINGLE_PER = time;						// load target delay tick time
 252:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <adc_channels+0x7f849e>
 256:	30 93 27 0a 	sts	0x0A27, r19	; 0x800a27 <adc_channels+0x7f849f>
	TCA0_SINGLE_CNT = 0;						// reset count (just in case)
 25a:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <adc_channels+0x7f8498>
 25e:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <adc_channels+0x7f8499>
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;	// enable time
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	fa e0       	ldi	r31, 0x0A	; 10
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24

	time = 1;			// reuse variable as flag
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
	while (time)		// idle until overflow flag is set
 270:	06 c0       	rjmp	.+12     	; 0x27e <CLOCK_delayMSec+0x54>
	{
		if (TCA0_SINGLE_INTFLAGS & TCA_SINGLE_OVF_bm) time = 0;
 272:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <adc_channels+0x7f8483>
 276:	90 ff       	sbrs	r25, 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <CLOCK_delayMSec+0x54>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
	TCA0_SINGLE_PER = time;						// load target delay tick time
	TCA0_SINGLE_CNT = 0;						// reset count (just in case)
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;	// enable time

	time = 1;			// reuse variable as flag
	while (time)		// idle until overflow flag is set
 27e:	21 15       	cp	r18, r1
 280:	31 05       	cpc	r19, r1
 282:	b9 f7       	brne	.-18     	; 0x272 <CLOCK_delayMSec+0x48>
	{
		if (TCA0_SINGLE_INTFLAGS & TCA_SINGLE_OVF_bm) time = 0;
	}

	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;		// clear overflow flag
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	fa e0       	ldi	r31, 0x0A	; 10
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	83 87       	std	Z+11, r24	; 0x0b
	TCA0_SINGLE_CTRLA &= ~(TCA_SINGLE_ENABLE_bm);	// disable timer
 28c:	80 81       	ld	r24, Z
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	80 83       	st	Z, r24

	// return
	if (delay > max_delay) return max_delay;
 292:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <max_delay>
 296:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <max_delay+0x1>
 29a:	84 17       	cp	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <CLOCK_delayMSec+0x78>

	return delay;
 2a0:	ca 01       	movw	r24, r20
}
 2a2:	08 95       	ret

000002a4 <__vector_3>:
/// Interrupt routine for RTC.
///
/// This is the interrupt service routine for the RTC. All it does is
/// increment the system tick time and clear the interrupt flag.
ISR(RTC_CNT_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
	sys_time++;						// increment tick time
 2b6:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <sys_time>
 2ba:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <sys_time+0x1>
 2be:	a0 91 27 38 	lds	r26, 0x3827	; 0x803827 <sys_time+0x2>
 2c2:	b0 91 28 38 	lds	r27, 0x3828	; 0x803828 <sys_time+0x3>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	a1 1d       	adc	r26, r1
 2ca:	b1 1d       	adc	r27, r1
 2cc:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <sys_time>
 2d0:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <sys_time+0x1>
 2d4:	a0 93 27 38 	sts	0x3827, r26	; 0x803827 <sys_time+0x2>
 2d8:	b0 93 28 38 	sts	0x3828, r27	; 0x803828 <sys_time+0x3>
	RTC.INTFLAGS = RTC_OVF_bm;		// clear interrupt flag
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <adc_channels+0x7f7bbb>
}
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <main>:


int main(void)
{

	state = BOOTUP;
 2f4:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <state>
	status = 0;
 2f8:	10 92 24 38 	sts	0x3824, r1	; 0x803824 <status>

	int flags = 0;

	// reuse var for initializing string array
	for (flags = 0; flags < DBG_LEN; flags++) dbg_line[flags] = 0;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	05 c0       	rjmp	.+10     	; 0x30c <main+0x18>
 302:	fc 01       	movw	r30, r24
 304:	e3 5d       	subi	r30, 0xD3	; 211
 306:	f7 4c       	sbci	r31, 0xC7	; 199
 308:	10 82       	st	Z, r1
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	8e 31       	cpi	r24, 0x1E	; 30
 30e:	91 05       	cpc	r25, r1
 310:	c4 f3       	brlt	.-16     	; 0x302 <main+0xe>
	flags = 0;

	// set up digital I/O
	SYS_LED_PORT.DIRSET = (1 << SYS_LED_PIN);
 312:	e0 e4       	ldi	r30, 0x40	; 64
 314:	f4 e0       	ldi	r31, 0x04	; 4
 316:	90 e2       	ldi	r25, 0x20	; 32
 318:	91 83       	std	Z+1, r25	; 0x01
	SYS_LED_PORT.OUTSET = (1 << SYS_LED_PIN);
 31a:	95 83       	std	Z+5, r25	; 0x05

	PWR_LED_PORT.DIRSET = (1 << PWR_LED_PIN);
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	81 83       	std	Z+1, r24	; 0x01
	PWR_LED_PORT.OUTCLR = (1 << PWR_LED_PIN);
 320:	86 83       	std	Z+6, r24	; 0x06

	USR_LED_PORT.DIRSET = (1 << USR_LED_PIN);
 322:	e0 e0       	ldi	r30, 0x00	; 0
 324:	f4 e0       	ldi	r31, 0x04	; 4
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	81 83       	std	Z+1, r24	; 0x01
	USR_LED_PORT.OUTCLR = (1 << USR_LED_PIN);
 32a:	86 83       	std	Z+6, r24	; 0x06

	USR_SW_PORT.DIRCLR = (1 << USR_SW_PIN);
 32c:	92 83       	std	Z+2, r25	; 0x02
	USR_SW_PORT.USR_SW_PINCTRL = PORT_PULLUPEN_bm;
 32e:	85 8b       	std	Z+21, r24	; 0x15


	// cannot send info out debug port, but can watch variable when debugging
    flags = CLOCK_init();
 330:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLOCK_init>
	flags = USART_init();
 334:	0e 94 ee 01 	call	0x3dc	; 0x3dc <USART_init>

	sei();		// enable interrupts (needed for USART transmission)
 338:	78 94       	sei

	// debug line
	sprintf(dbg_line,"\n\nInitializing...\n\0");
 33a:	83 e1       	ldi	r24, 0x13	; 19
 33c:	e4 e4       	ldi	r30, 0x44	; 68
 33e:	f5 e8       	ldi	r31, 0x85	; 133
 340:	ad e2       	ldi	r26, 0x2D	; 45
 342:	b8 e3       	ldi	r27, 0x38	; 56
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x50>
	flags = USART_transmit(dbg_line);
 34c:	8d e2       	ldi	r24, 0x2D	; 45
 34e:	98 e3       	ldi	r25, 0x38	; 56
 350:	0e 94 14 02 	call	0x428	; 0x428 <USART_transmit>

	CLOCK_delayMSec(2);
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 15 01 	call	0x22a	; 0x22a <CLOCK_delayMSec>

	// init ADC, send debug message
	flags = ADC_init();
 35c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_init>
	if (flags) sprintf(dbg_line,"ADC - Done\n\0");
 360:	89 2b       	or	r24, r25
 362:	51 f0       	breq	.+20     	; 0x378 <main+0x84>
 364:	8c e0       	ldi	r24, 0x0C	; 12
 366:	e8 e5       	ldi	r30, 0x58	; 88
 368:	f5 e8       	ldi	r31, 0x85	; 133
 36a:	ad e2       	ldi	r26, 0x2D	; 45
 36c:	b8 e3       	ldi	r27, 0x38	; 56
 36e:	01 90       	ld	r0, Z+
 370:	0d 92       	st	X+, r0
 372:	8a 95       	dec	r24
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x7a>
 376:	09 c0       	rjmp	.+18     	; 0x38a <main+0x96>
	else sprintf(dbg_line,"ADC - Error\n\0");
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	e5 e6       	ldi	r30, 0x65	; 101
 37c:	f5 e8       	ldi	r31, 0x85	; 133
 37e:	ad e2       	ldi	r26, 0x2D	; 45
 380:	b8 e3       	ldi	r27, 0x38	; 56
 382:	01 90       	ld	r0, Z+
 384:	0d 92       	st	X+, r0
 386:	8a 95       	dec	r24
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x8e>
	flags = USART_transmit(dbg_line);
 38a:	8d e2       	ldi	r24, 0x2D	; 45
 38c:	98 e3       	ldi	r25, 0x38	; 56
 38e:	0e 94 14 02 	call	0x428	; 0x428 <USART_transmit>

	CLOCK_delayMSec(2);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 15 01 	call	0x22a	; 0x22a <CLOCK_delayMSec>

	// kick off first conversion
	flags = ADC_startSweep();
 39a:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_startSweep>
	if (flags)
 39e:	89 2b       	or	r24, r25
 3a0:	69 f0       	breq	.+26     	; 0x3bc <main+0xc8>
	{
		sprintf(dbg_line,"\nERROR running ADC\n\0");
 3a2:	84 e1       	ldi	r24, 0x14	; 20
 3a4:	e3 e7       	ldi	r30, 0x73	; 115
 3a6:	f5 e8       	ldi	r31, 0x85	; 133
 3a8:	ad e2       	ldi	r26, 0x2D	; 45
 3aa:	b8 e3       	ldi	r27, 0x38	; 56
 3ac:	01 90       	ld	r0, Z+
 3ae:	0d 92       	st	X+, r0
 3b0:	8a 95       	dec	r24
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0xb8>
		flags = USART_transmit(dbg_line);
 3b4:	8d e2       	ldi	r24, 0x2D	; 45
 3b6:	98 e3       	ldi	r25, 0x38	; 56
 3b8:	0e 94 14 02 	call	0x428	; 0x428 <USART_transmit>
	}

	state = IDLE;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <state>
	SYS_LED_PORT.OUTCLR = (1 << SYS_LED_PIN);
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <adc_channels+0x7f7ebe>
		}


		// start ADC sweep, loop until ADC is done, then sleep until next RTC tick

		ADC_startSweep();
 3c8:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_startSweep>

		flags = ADC_isDone();
 3cc:	0e 94 91 00 	call	0x122	; 0x122 <ADC_isDone>

		while (flags == 0) flags = ADC_isDone();
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <main+0xe2>
 3d2:	0e 94 91 00 	call	0x122	; 0x122 <ADC_isDone>
 3d6:	89 2b       	or	r24, r25
 3d8:	e1 f3       	breq	.-8      	; 0x3d2 <main+0xde>
 3da:	f6 cf       	rjmp	.-20     	; 0x3c8 <main+0xd4>

000003dc <USART_init>:
{

	// variable init
	uint32_t i = 0;

	for(i = 0; i<SERIAL_BUF_SIZE; i++) ser_buffer[i] = 0;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	dc 01       	movw	r26, r24
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <USART_init+0x16>
 3e4:	fc 01       	movw	r30, r24
 3e6:	e5 5b       	subi	r30, 0xB5	; 181
 3e8:	f7 4c       	sbci	r31, 0xC7	; 199
 3ea:	10 82       	st	Z, r1
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	a1 1d       	adc	r26, r1
 3f0:	b1 1d       	adc	r27, r1
 3f2:	80 32       	cpi	r24, 0x20	; 32
 3f4:	91 05       	cpc	r25, r1
 3f6:	a1 05       	cpc	r26, r1
 3f8:	b1 05       	cpc	r27, r1
 3fa:	a0 f3       	brcs	.-24     	; 0x3e4 <USART_init+0x8>
	ser_buf_index = -1;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <ser_buf_index>
	xmit_index = 0;
 402:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <xmit_index>

	// configure serial port
	SERIAL_PORT.DIRSET = SERIAL_TX_PIN;
 406:	e0 e2       	ldi	r30, 0x20	; 32
 408:	f4 e0       	ldi	r31, 0x04	; 4
 40a:	84 e0       	ldi	r24, 0x04	; 4
 40c:	81 83       	std	Z+1, r24	; 0x01
	SERIAL_PORT.OUTCLR = SERIAL_TX_PIN;
 40e:	86 83       	std	Z+6, r24	; 0x06
		USART0.CTRLB = USART_RXMODE_CLK2X_gc;
		i = ((F_CPU * 8) + (SERIAL_BAUD / 2)) / SERIAL_BAUD; // for double-rate mode, k=8

	}

	USART0.BAUD = i;
 410:	e0 e0       	ldi	r30, 0x00	; 0
 412:	f8 e0       	ldi	r31, 0x08	; 8
 414:	87 e5       	ldi	r24, 0x57	; 87
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	80 87       	std	Z+8, r24	; 0x08
 41a:	91 87       	std	Z+9, r25	; 0x09

	// enable transmitter, but do not enable interrupts yet (as there is no data to transmit)
	USART0.CTRLB |= USART_TXEN_bm;
 41c:	86 81       	ldd	r24, Z+6	; 0x06
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	86 83       	std	Z+6, r24	; 0x06

    // if invalid baud rate available, signal as error
    if (i < 64) return 1;
    else return 0;

}
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	08 95       	ret

00000428 <USART_transmit>:


int USART_transmit(uint8_t *data)
{
 428:	ac 01       	movw	r20, r24
	// return if not done with previous transmission (index will be set to negative number)
	if (ser_buf_index >= 0) return -1;
 42a:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <ser_buf_index>
 42e:	88 23       	and	r24, r24
 430:	dc f5       	brge	.+118    	; 0x4a8 <USART_transmit+0x80>

	// sanitize input variables
	if (data == 0) return -2;				// check null pointer
 432:	41 15       	cp	r20, r1
 434:	51 05       	cpc	r21, r1
 436:	d9 f1       	breq	.+118    	; 0x4ae <USART_transmit+0x86>

	// set indices ahead of copying
	ser_buf_index = 0;
 438:	10 92 6c 38 	sts	0x386C, r1	; 0x80386c <ser_buf_index>
	xmit_index = 0;
 43c:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <xmit_index>

	// copy data to buffer, halt at max buffer size
	while (ser_buf_index < SERIAL_BUF_SIZE)
 440:	13 c0       	rjmp	.+38     	; 0x468 <USART_transmit+0x40>
	{
        if (data[ser_buf_index] == 0) break;             // done if hit null value termination
 442:	fa 01       	movw	r30, r20
 444:	e9 0f       	add	r30, r25
 446:	f1 1d       	adc	r31, r1
 448:	97 fd       	sbrc	r25, 7
 44a:	fa 95       	dec	r31
 44c:	20 81       	ld	r18, Z
 44e:	22 23       	and	r18, r18
 450:	79 f0       	breq	.+30     	; 0x470 <USART_transmit+0x48>
		ser_buffer[ser_buf_index] = data[ser_buf_index];
 452:	e9 2f       	mov	r30, r25
 454:	09 2e       	mov	r0, r25
 456:	00 0c       	add	r0, r0
 458:	ff 0b       	sbc	r31, r31
 45a:	e5 5b       	subi	r30, 0xB5	; 181
 45c:	f7 4c       	sbci	r31, 0xC7	; 199
 45e:	20 83       	st	Z, r18
		ser_buf_index++;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	89 0f       	add	r24, r25
 464:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <ser_buf_index>
	// set indices ahead of copying
	ser_buf_index = 0;
	xmit_index = 0;

	// copy data to buffer, halt at max buffer size
	while (ser_buf_index < SERIAL_BUF_SIZE)
 468:	90 91 6c 38 	lds	r25, 0x386C	; 0x80386c <ser_buf_index>
 46c:	90 32       	cpi	r25, 0x20	; 32
 46e:	4c f3       	brlt	.-46     	; 0x442 <USART_transmit+0x1a>
		ser_buf_index++;

	}

    // if terminated immediately, reset index and return before initiating transmission
    if (ser_buf_index == 0)
 470:	91 11       	cpse	r25, r1
 472:	06 c0       	rjmp	.+12     	; 0x480 <USART_transmit+0x58>
    {
        xmit_index = -1;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <xmit_index>
        return 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	08 95       	ret
    }

	// load first byte for transmission
	USART0.TXDATAL = ser_buffer[xmit_index];
 480:	e0 91 6b 38 	lds	r30, 0x386B	; 0x80386b <xmit_index>
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e5 5b       	subi	r30, 0xB5	; 181
 488:	f7 4c       	sbci	r31, 0xC7	; 199
 48a:	80 81       	ld	r24, Z
 48c:	e0 e0       	ldi	r30, 0x00	; 0
 48e:	f8 e0       	ldi	r31, 0x08	; 8
 490:	82 83       	std	Z+2, r24	; 0x02
	xmit_index++;
 492:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <xmit_index>
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <xmit_index>

	// enable "need more data" interrupt; this should fire right away
	USART0.CTRLA = USART_DREIE_bm;
 49c:	80 e2       	ldi	r24, 0x20	; 32
 49e:	85 83       	std	Z+5, r24	; 0x05

    // return number of characters copied
	return ser_buf_index;
 4a0:	89 2f       	mov	r24, r25
 4a2:	99 0f       	add	r25, r25
 4a4:	99 0b       	sbc	r25, r25
 4a6:	08 95       	ret


int USART_transmit(uint8_t *data)
{
	// return if not done with previous transmission (index will be set to negative number)
	if (ser_buf_index >= 0) return -1;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	08 95       	ret

	// sanitize input variables
	if (data == 0) return -2;				// check null pointer
 4ae:	8e ef       	ldi	r24, 0xFE	; 254
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
	USART0.CTRLA = USART_DREIE_bm;

    // return number of characters copied
	return ser_buf_index;

}
 4b2:	08 95       	ret

000004b4 <__vector_18>:


ISR(USART0_DRE_vect)
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
    // check for "done" condition
	if (xmit_index < ser_buf_index)
 4ca:	20 91 6b 38 	lds	r18, 0x386B	; 0x80386b <xmit_index>
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <ser_buf_index>
 4d4:	08 2e       	mov	r0, r24
 4d6:	00 0c       	add	r0, r0
 4d8:	99 0b       	sbc	r25, r25
 4da:	28 17       	cp	r18, r24
 4dc:	39 07       	cpc	r19, r25
 4de:	74 f4       	brge	.+28     	; 0x4fc <__vector_18+0x48>
	{
        // load next character to transmit
        USART0.TXDATAL = ser_buffer[xmit_index];
 4e0:	e0 91 6b 38 	lds	r30, 0x386B	; 0x80386b <xmit_index>
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	e5 5b       	subi	r30, 0xB5	; 181
 4e8:	f7 4c       	sbci	r31, 0xC7	; 199
 4ea:	80 81       	ld	r24, Z
 4ec:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <adc_channels+0x7f827a>
        xmit_index++;
 4f0:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <xmit_index>
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <xmit_index>
 4fa:	0a c0       	rjmp	.+20     	; 0x510 <__vector_18+0x5c>

	}
    else
    {
		// reset indices
		ser_buf_index = -1;
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <ser_buf_index>
		xmit_index = 0;
 502:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <xmit_index>

		// no more interrupts until next transmission
		USART0.CTRLA &= (~USART_DREIE_bm);
 506:	e0 e0       	ldi	r30, 0x00	; 0
 508:	f8 e0       	ldi	r31, 0x08	; 8
 50a:	85 81       	ldd	r24, Z+5	; 0x05
 50c:	8f 7d       	andi	r24, 0xDF	; 223
 50e:	85 83       	std	Z+5, r24	; 0x05
    }



 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <eeprom_read_word>:
 526:	0e 94 9c 02 	call	0x538	; 0x538 <eeprom_mapen>
 52a:	80 81       	ld	r24, Z
 52c:	91 81       	ldd	r25, Z+1	; 0x01
 52e:	08 95       	ret

00000530 <eeprom_read_byte>:
 530:	03 d0       	rcall	.+6      	; 0x538 <eeprom_mapen>
 532:	80 81       	ld	r24, Z
 534:	99 27       	eor	r25, r25
 536:	08 95       	ret

00000538 <eeprom_mapen>:
 538:	fc 01       	movw	r30, r24
 53a:	e0 50       	subi	r30, 0x00	; 0
 53c:	fc 4e       	sbci	r31, 0xEC	; 236
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
